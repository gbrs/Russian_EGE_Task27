'''
Положительные целые числа раз в минуту.
Необходимо вычислить «бета-значение» – минимальное чётное произведение двух показаний,
между моментами передачи которых прошло не менее 6 минут.
Если получить такое произведение не удаётся, ответ считается равным –1.
'''

'''
Чтобы произведение было чётным, хотя бы один сомножитель должен быть чётным. 
По мере ввода данных надо знать абсолютное минимальное и чётное минимальное показания 
(с учетом правила 6). Каждое вновь вводимое показание умножать на соответствующий 
(четный/нечетный) минимум. Запоминать минимальное из всех таких произведений. 
Для этого сохраняем 2 матрицы по 6 элементов с числами, 
которые будут абсолютными/четными минимумами через 6 шагов.
'''

'''
Пример: 11; 12, 45, 5, 3, 17, 23, 21, 20, 19, 18, 17
Ответ: 54
'''

# количество вводимых значений
N = int(input())

# создаем две матрицы: для абсолютно минимальных и четных минимальных
MN = []
MN2 = []

# минимальные значения инициализируем невозможными 1001
mn = mn2 = 1001
# минимальное значение произведения инициализиируем 1001 * 1001
minimult = mn * mn

# вводим первые 6 чисел и каждый раз определяем минимальные на данный момент числа
# и записываем их в соответствующие массивы
for i in range(6):
    a = int(input())  # текущее вводимое значение
    if a < mn:
        mn = a
    if a % 2 == 0 and a < mn2:
        mn2 = a
    MN.append(mn)
    MN2.append(mn2)
    print('MN', MN, ', MN2', MN2)  # для анализа

# вводим остальные числа, постоянно обновляя стэк
for i in range(6, N):
    a = int(input())
    if a % 2 == 0:  # если текущее число четное
        t = a * MN.pop(0)  # произведение текущего числа с абсолютно минимальным
        MN2.pop(0)  # откусываем левые элементы обоих(!) стэков
    else:
        t = a * MN2.pop(0)  # произведение текущего числа с четным минимальным
        MN.pop(0)  # откусываем левые элементы стэков
    minimult = min(minimult, t)

    # дополняем стэки справа текущими минимумами
    if a < mn:
        mn = a
    if a % 2 == 0 and a < mn:
        mn2 = a
    MN.append(mn)
    MN2.append(mn2)
    print('MN', MN, ', MN2', MN2, ', minimult', minimult)  # для анализа

# 'Если получить такое произведение не удаётся, ответ считается равным –1'
if minimult % 2 != 0:  # если произведение нечетное, т.к. не было четных чисел
    minimult = -1

print(minimult)
